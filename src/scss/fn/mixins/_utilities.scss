@function infix($var) {
  @return if($var == '', '', "-#{$var}");
}
@function modifier-infix($var) {
  @return if($var == '', '', "--#{$var}");
}

// @mixin map-to-css($map, $base, $prop) {
//     @each $breakpoint in map-keys($grid-breakpoints) {
//         @include media-breakpoint-up($breakpoint) {
//             $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
//             @each $key, $val in $map {
//                 $key: infix($key);
//                 #{$base}#{$infix}#{$key} { #{$prop}: #{$val}; }
//             }
//         }
//     }
// }

// @mixin map-to-aspect-ratios($map, $base, $prop) {
//     @each $breakpoint in map-keys($grid-breakpoints) {
//         @include media-breakpoint-up($breakpoint) {
//             $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

//             @each $key, $val in $aspect-ratios {
//                 $x: map-get($val, x);
//                 $y: map-get($val, y);
//                 .aspect-ratio#{$infix}-#{$key} { #{$prop}: $y / $x * 100%; }
//             }
//         }
//     }
// }
// @mixin map-to-aspect-ratios($map, $mappings) {
//     @each $class, $prop in $mappings {
//         @each $breakpoint in map-keys($grid-breakpoints) {
//             @include media-breakpoint-up($breakpoint) {
//                 $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
//                 @each $key, $val in $map {
//                     $key: infix($key);
//                     $x: map-get($val, x);
//                     $y: map-get($val, y);
//                     #{$class}#{$infix}#{$key} { #{$prop}: $y / $x * 100%; }
//                 }
//             }
//         }
//     }
// }

// @mixin map-to-css($map, $mappings) {
//     @each $class, $prop in $mappings {
//         @each $breakpoint in map-keys($grid-breakpoints) {
//             @include media-breakpoint-up($breakpoint) {
//                 $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
//                 @each $key, $val in $map {
//                     $key: infix($key);
//                     #{$class}#{$infix}#{$key} { #{$prop}: #{$val}; }
//                 }
//             }
//         }
//     }
// }


// @mixin map-to-css1($shortcuts, $modifiers, $grid-breakpoints: $grid-breakpoints) {
//     @each $class, $breakpoints in $shortcuts {
//         @each $breakpoint in $breakpoints {
//             @include media-breakpoint-up($breakpoint) {
//                 $breakpoint-infix: breakpoint-infix($breakpoint, $grid-breakpoints);
//                 @each $modifier, $definitions in $modifiers {
//                     $modifier-infix: modifier-infix($modifier);
//                     @each $prop, $val in $definitions {
//                         #{$class}#{$breakpoint-infix}#{$modifier-infix} { #{$prop}: #{$val}; }
//                     }
//                 }
//             }
//         }
//     }
// }


// @mixin map-to-css2($breakpoints, $shortcut, $property, $modifiers, $grid-breakpoints: $grid-breakpoints) {
//     @each $breakpoint in $breakpoints {
//         @include media-breakpoint-up($breakpoint) {
//             $breakpoint-infix: breakpoint-infix($breakpoint, $grid-breakpoints);
//             @each $modifier, $val in $modifiers {
//                 $modifier-infix: modifier-infix($modifier);
//                 #{$shortcut}#{$breakpoint-infix}#{$modifier-infix} { #{$property}: #{$val}; }
//             }
//         }
//     }
// }

// @mixin to-css($breakpoints, $shortcut, $modifiers, $grid-breakpoints: $grid-breakpoints) {
//     @each $breakpoint in $breakpoints {
//         @include media-breakpoint-up($breakpoint) {
//             $breakpoint-infix: breakpoint-infix($breakpoint, $grid-breakpoints);
//             @each $modifier, $definitions in $modifiers {
//                 $modifier-infix: modifier-infix($modifier);
//                 @each $prop, $val in $definitions {
//                     .#{$shortcut}#{$breakpoint-infix}#{$modifier-infix} { #{$prop}: #{$val}; }
//                 }
//             }
//         }
//     }
// }

@mixin to-css($breakpoints, $shortcut, $properties, $modifiers, $grid-breakpoints: $grid-breakpoints) {
    @each $breakpoint in $breakpoints {
        @include media-breakpoint-up($breakpoint) {
            $breakpoint-infix: breakpoint-infix($breakpoint, $grid-breakpoints);
            @each $modifier, $val in $modifiers {
                $modifier-infix: modifier-infix($modifier);
                @each $property in $properties {
                    .#{$shortcut}#{$breakpoint-infix}#{$modifier-infix} { #{$property}: #{$val}; }
                }
            }
        }
    }
}